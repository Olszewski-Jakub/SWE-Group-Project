version: "3.9"

services:
  db:
    image: postgres:17.6-alpine3.22
    container_name: demo_db
    environment:
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo
      POSTGRES_DB: demo_db
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U demo -d demo_db" ]
      interval: 5s
      timeout: 3s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq-local
    ports: [ "5672:5672", "15672:15672" ]
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    # Build from source using the dev Dockerfile (no need to prebuild the jar)
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    container_name: clean_arch_app
    depends_on:
      - db
      - rabbitmq
    environment:
      SPRING_PROFILES_ACTIVE: "local"
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-guest}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      EMAIL_WORKER_ENABLED: "true"
      MAILJET_API_KEY: ${MAILJET_API_KEY:-changeme}
      MAILJET_API_SECRET: ${MAILJET_API_SECRET:-changeme}
      MAIL_FROM_EMAIL: ${MAIL_FROM_EMAIL:-no-reply@example.com}
      MAIL_FROM_NAME: ${MAIL_FROM_NAME:-GroupNine}
      # The app's application-local.yml already points to jdbc:postgresql://db:5432/demo_db
      # If you prefer env-only config, uncomment:
      # SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/demo_db"
      # SPRING_DATASOURCE_USERNAME: "demo"
      # SPRING_DATASOURCE_PASSWORD: "demo"
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080/api/health" ]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7.2-alpine
    container_name: demo_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10

volumes:
  db-data:
