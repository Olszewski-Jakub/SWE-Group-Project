name: Backend CI/CD

on:
  workflow_call:
    inputs:
      ref:
        required: false
        type: string
        description: Git ref to checkout
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend

concurrency:
  group: backend-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build_and_test:
    name: Build & Test (Gradle)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests + coverage (all modules)
        run: ./gradlew clean verifyCoverageAll jacocoRootReport --no-daemon

      - name: Upload test report (JUnit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/**/build/test-results/**/*.xml

      - name: Upload JaCoCo reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-jacoco-reports
          path: |
            backend/build/reports/jacoco/**
            backend/**/build/reports/jacoco/**

  build_image:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    needs: [ build_and_test ]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=main,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  deploy:
    name: Deploy to DEV Server (Blue/Green)
    runs-on: ubuntu-latest
    needs: [ build_image ]
    environment: DEV
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          umask 077
          cat > ~/.ssh/id_rsa <<'EOF'
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          chmod 600 ~/.ssh/id_rsa
          printf "StrictHostKeyChecking no\nUserKnownHostsFile=/dev/null\n" >> ~/.ssh/config

      - name: Blue-Green Deploy via SSH
        env:
          KONG_ADMIN_URL: ${{ vars.KONG_ADMIN_URL }}
          APP_DIR: ${{ vars.APP_DIR }}
          DOCKER_COMPOSE_FILE: ${{ vars.DOCKER_COMPOSE_FILE }}
          BLUE_PORT: ${{ vars.BLUE_PORT || '8091' }}
          GREEN_PORT: ${{ vars.GREEN_PORT || '8090' }}
          HEALTH_PATH: ${{ vars.HEALTH_PATH || '/api/v1/health' }}
          SERVER_PORT: ${{ secrets.SERVER_PORT || '22' }}
        run: |
          ssh -p "$SERVER_PORT" ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -euo pipefail

            cd "$APP_DIR"
            # Keep deployment files fresh if repo is present
            if [ -d .git ]; then
              git fetch --all --prune || true
              git reset --hard origin/main || true
            fi

            # Determine active target from Kong (expects upstream targets API URL)
            ACTIVE_TARGET=$(curl -s "$KONG_ADMIN_URL" | jq -r '.data[] | select(.weight == 100) | .target' | awk -F: '{print $1}')

            if [ "$ACTIVE_TARGET" = "backend-blue" ]; then
              NEW_VERSION="green"; NEW_PORT=${GREEN_PORT}; OLD_VERSION="blue"; OLD_PORT=${BLUE_PORT}
            else
              NEW_VERSION="blue"; NEW_PORT=${BLUE_PORT}; OLD_VERSION="green"; OLD_PORT=${GREEN_PORT}
            fi

            echo "Deploying new version to $NEW_VERSION on port $NEW_PORT"
            sudo docker compose -f "$DOCKER_COMPOSE_FILE" pull backend-$NEW_VERSION || true
            sudo docker compose -f "$DOCKER_COMPOSE_FILE" up -d backend-$NEW_VERSION --remove-orphans

            max_retries=12
            retry=0
            echo "Waiting for backend-$NEW_VERSION to be healthy..."
            until curl -fsS "http://localhost:${NEW_PORT}${HEALTH_PATH}" >/dev/null || [ $retry -ge $max_retries ]; do
              retry=$((retry+1))
              echo "Health check failed (attempt $retry/$max_retries)"
              sleep 5
            done

            if [ $retry -ge $max_retries ]; then
              echo "Health check failed. Rolling back..."
              sudo docker compose -f "$DOCKER_COMPOSE_FILE" stop backend-$NEW_VERSION || true
              sudo docker compose -f "$DOCKER_COMPOSE_FILE" rm -f backend-$NEW_VERSION || true
              sudo docker system prune -af || true
              exit 1
            fi

            echo "New version healthy. Gradually shifting traffic..."
            for i in $(seq 10 10 100); do
              curl -sS -X PATCH "$KONG_ADMIN_URL/backend-$NEW_VERSION:${NEW_PORT}" -d "weight=$i" >/dev/null
              curl -sS -X PATCH "$KONG_ADMIN_URL/backend-$OLD_VERSION:${OLD_PORT}" -d "weight=$((100-i))" >/dev/null
              echo "Traffic shifted: $i% -> $NEW_VERSION"
              sleep 5
            done

            echo "100% traffic on $NEW_VERSION. Removing old version..."
            sudo docker compose -f "$DOCKER_COMPOSE_FILE" stop backend-$OLD_VERSION || true
            sudo docker compose -f "$DOCKER_COMPOSE_FILE" rm -f backend-$OLD_VERSION || true
            sudo docker system prune -af || true
            echo "Deployment complete."
          EOF
