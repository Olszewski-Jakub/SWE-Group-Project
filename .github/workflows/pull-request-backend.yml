name: Backend PR Pipeline

on:
  workflow_call:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write
  packages: read

jobs:
  # 1) Fast compile to warm Gradle cache & fail early
  compile_and_cache:
    name: Compile & Warm Gradle Cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Execute Permissions for Gradle
        run: chmod +x backend/gradlew

      - name: Compile (no tests) to warm cache
        working-directory: backend
        run: ./gradlew --no-daemon assemble

  # 2) Build & test (runs after compile_and_cache)
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: compile_and_cache
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Execute Permissions for Gradle
        run: chmod +x backend/gradlew

      - name: Run Tests + Coverage (all modules)
        working-directory: backend
        run: ./gradlew --no-daemon clean verifyCoverageAll jacocoRootReport

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-results
          path: backend/**/build/test-results/test/*.xml

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: coverage
          path: backend/build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml

  # 3) Dependency updates (runs after compile_and_cache)
  dependency_updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    needs: compile_and_cache
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Check for Dependency Updates
        working-directory: backend
        run: ./gradlew --no-daemon dependencyUpdates

  # 4) CodeQL security checks (after build & test)
  security_checks:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: compile_and_cache
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: autobuild
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # 5) Publish test report (after build & test)
  upload_test_report:
    name: Publish Test Report
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: test-results

      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        with:
          artifact: test-results
          name: Test Report
          path: '**/*.xml'
          reporter: java-junit
          fail-on-error: false

  # 6) Coverage comment (after publish test report)
  coverage_comment:
    name: Coverage Comment (JaCoCo)
    runs-on: ubuntu-latest
    needs: upload_test_report
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository (needed to diff changed files)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage

      - name: Jacoco Report
        uses: madrapps/jacoco-report@v1.7.2
        with:
          paths: ${{ github.workspace }}/coverage/jacocoRootReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          update-comment: true
          title: 'Code Coverage (JaCoCo)'
          min-coverage-overall: 50
          min-coverage-changed-files: 70
          debug-mode: true

  # 7) Final success PR comment (only if dep updates + security + coverage all succeeded)
  pipeline_success_comment:
    name: Backend pipeline succeeded
    runs-on: ubuntu-latest
    needs:
      - dependency_updates
      - security_checks
      - coverage_comment
    if: >
      ${{
        needs.dependency_updates.result == 'success' &&
        needs.security_checks.result == 'success' &&
        needs.coverage_comment.result == 'success'
      }}
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Add PR Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ✅ **Backend PR Pipeline succeeded!**
            - 🧩 Dependency Updates: ✅ Passed
            - 🛡️ Security Checks (CodeQL): ✅ Passed
            - 📊 Coverage Comment: ✅ Posted
            ---
            _All backend checks completed successfully._
