name: Backend CI/CD

on:
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  packages: read
  
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: StackOverFlowedCup-API

jobs:
  build_and_test:
    name: Build & Test (Gradle)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests + coverage (all modules)
        run: ./gradlew clean verifyCoverageAll jacocoRootReport --no-daemon

      - name: Upload test report (JUnit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/**/build/test-results/**/*.xml

      - name: Upload JaCoCo reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-jacoco-reports
          path: |
            backend/build/reports/jacoco/**
            backend/**/build/reports/jacoco/**

  build_image:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    needs: [ build_and_test ]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v4.0.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./backend
          file: ./backend/docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  deploy:
    runs-on: ubuntu-latest
    environment: Staging
    needs: [ build_image ]
    name: Deploy to DEV Server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
            mkdir -p ~/.ssh
            umask 077
            cat > ~/.ssh/id_rsa <<'EOF'
            ${{ secrets.SSH_PRIVATE_KEY }}
            EOF
            chmod 600 ~/.ssh/id_rsa
            echo "StrictHostKeyChecking no" >> ~/.ssh/config
            echo "UserKnownHostsFile=/dev/null" >> ~/.ssh/config
            chmod 600 ~/.ssh/config

      - name: Deploy Blue-Green with Kong
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} -p 10201 << 'EOF'
            set -e
            cd ${{ vars.APP_DIR }}
            git pull origin backend-deploy-test

            # Get current active instance from Kong Admin API
            ACTIVE_TARGET=$(curl -s ${{ vars.KONG_ADMIN_URL }} | jq -r '.data[] | select(.weight == 100) | .target' | awk -F: '{print $1}')

            if [ "$ACTIVE_TARGET" = "swe-backend-blue" ]; then
              NEW_VERSION="green"
              NEW_PORT=${{ vars.GREEN_PORT }}
              OLD_VERSION="blue"
              OLD_PORT=${{ vars.BLUE_PORT }}
            else
              NEW_VERSION="blue"
              NEW_PORT=${{ vars.BLUE_PORT }}
              OLD_VERSION="green"
              OLD_PORT=${{ vars.GREEN_PORT }}
            fi

            echo "Deploying new version to $NEW_VERSION..."
            sudo docker compose -f ${{ vars.DOCKER_COMPOSE_FILE }} up -d swe-backend-$NEW_VERSION --remove-orphans

            # Health check with retry logic
            max_retries=10
            retry_count=0
            echo "Waiting for $NEW_VERSION to be healthy..."
            while [ $retry_count -lt $max_retries ]; do
                if curl http://localhost:$NEW_PORT/health >/dev/null; then
                echo "Service is healthy!"
                break
              else
                retry_count=$((retry_count+1))
                echo "Health check failed (attempt $retry_count/$max_retries)"
                sleep 5
              fi
            done

            if [ $retry_count -eq $max_retries ]; then
              echo "Health check failed after $max_retries attempts. Rolling back..."
              sudo docker compose -f ${{ vars.DOCKER_COMPOSE_FILE }} stop swe-backend-$NEW_VERSION
              sudo docker compose -f ${{ vars.DOCKER_COMPOSE_FILE }} rm -f swe-backend-$NEW_VERSION
              sudo docker system prune -af
              echo "Removed failed $NEW_VERSION container"
              exit 1
            fi

            echo "New version is healthy. Gradually shifting traffic..."

            # Gradually shift traffic to new version
            for i in $(seq 10 10 100); do
              curl -X PATCH ${{ vars.KONG_ADMIN_URL }}/swe-backend-$NEW_VERSION:$NEW_PORT -d "weight=$i"
              curl -X PATCH ${{ vars.KONG_ADMIN_URL }}/swe-backend-$OLD_VERSION:$OLD_PORT -d "weight=$((100-i))"
              echo "Traffic shifted: $i% to $NEW_VERSION"
              sleep 5
            done

            echo "100% traffic now on $NEW_VERSION. Removing old version..."
            sudo docker compose -f ${{ vars.DOCKER_COMPOSE_FILE }} stop swe-backend-$OLD_VERSION
            sudo docker compose -f ${{ vars.DOCKER_COMPOSE_FILE }} rm -f swe-backend-$OLD_VERSION

            sudo docker system prune -af

            echo "Deployment complete!"
          EOF